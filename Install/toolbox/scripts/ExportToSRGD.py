# ExportToSRGD.py: export our data to the SPAGeDi format
# -*- coding: utf-8 -*-
# Created by: Shaun Walbridge
#             Esri

import arcpy
import csv
import os
import sys
import time

# local imports
import utils
import config
settings = config.settings()

def formatDate(input_date):
    return input_date.strftime("%Y-%m-%d %H:%M:%S"). replace(" ", "T")

def main(input_fc=None, output_csv=None, mode=settings.mode):

    if not arcpy.Exists(input_fc):
        utils.msg("Input, {} doesn't exist.".format(input_fc))
        sys.exit()

    try:
        with open(output_csv, 'wb') as output_file:
            writer = csv.writer(output_file, dialect='excel', \
                quotechar='"', quoting=csv.QUOTE_ALL)

            # fields generated by ArcGIS & lacking a direct use in Shepherd
            ignored_fields = ['OID', 'OBJECTID', 'Shape']
            # header row should contain our fields declaration
            fields = [field.name 
                    for field in 
                    arcpy.ListFields(input_fc)
                    if field.name not in ignored_fields]
            writer.writerow(fields)

            our_date = "Date_formatted"
            date_exists = False
            # If we don't have a formatted date field, don't try to manipulate it.
            if our_date in fields:
                date_pos = fields.index(our_date)
                date_exists = True
            with arcpy.da.SearchCursor(input_fc, fields) as cursor:
                for row in cursor:
                    formatted_row = list(row[:])
                    if date_exists:
                        date_value = row[date_pos]
                        try:
                            formatted_row[date_pos] = formatDate(date_value)
                        except Exception as e:
                            arcpy.AddError(e)
                        writer.writerow([utils.xstr(r) for r in formatted_row])

    except Exception as e:
        utils.msg("Error creating output file.", mtype='error', exception=e)
        sys.exit()

    utils.msg("Exported results saved to %s." % output_csv)
    if mode == 'toolbox':
        time.sleep(4)

# when executing as a standalone script get parameters from sys
if __name__=='__main__':
    # Defaults when no configuration is provided
    defaults_tuple = (
        ('input_fc', os.path.join(settings.example_gdb, "SRGD_example_Spatial")),
        ('output_csv',  "example_SRGD_export.csv")
    )    
    defaults = utils.parameters_from_args(defaults_tuple, sys.argv)
    main(mode='script', **defaults)
